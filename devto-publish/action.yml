name: 'Dev.to Auto Publisher'
description: 'Automatically publish articles to Dev.to from your repository'
author: 'Gokul Nathan B'
branding:
  icon: 'edit'
  color: 'black'

inputs:
  devto-api-key:
    description: 'Dev.to API Key'
    required: true
  github-token:
    description: 'GitHub Token with repository variables write permission'
    required: true
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '24'
  content-path:
    description: 'Path to the content/markdown files in user repo'
    required: false
    default: 'content'
  # Add inputs for saved post data
  saved-post-id:
    description: 'Previously saved Dev.to post ID'
    required: false
    default: ''
  saved-post-title:
    description: 'Previously saved Dev.to post title'
    required: false
    default: ''
  saved-post-url:
    description: 'Previously saved Dev.to post URL'
    required: false
    default: ''
  saved-post-published-at:
    description: 'Previously saved Dev.to post published date'
    required: false
    default: ''
  saved-post-updated-at:
    description: 'Previously saved Dev.to post updated date'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout action repository
      uses: actions/checkout@v4
      with:
        repository: gokulnathan66/article-automation
        path: action-repo
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
    
    - name: Install action dependencies
      run: |
        cd action-repo
        if [ -f package.json ]; then
          npm install
          echo "✅ Installed action dependencies"
        else
          echo "No package.json found in action repo"
        fi
      shell: bash
      
    - name: Process Dev.to article
      run: |
        # Load saved variables from inputs
        if [ -n "${{ inputs.saved-post-id }}" ]; then
          export DEV_TO_SAVED_POST_ID="${{ inputs.saved-post-id }}"
          export DEV_TO_SAVED_POST_TITLE="${{ inputs.saved-post-title }}"
          export DEV_TO_SAVED_POST_URL="${{ inputs.saved-post-url }}"
          export DEV_TO_SAVED_POST_PUBLISHED_AT="${{ inputs.saved-post-published-at }}"
          export DEV_TO_SAVED_POST_UPDATED_AT="${{ inputs.saved-post-updated-at }}"
          echo "✅ Previous Dev.to post data loaded from inputs"
        else
          echo "ℹ️ No previous Dev.to post data found"
        fi
        
        # Set content path for the script
        export USER_CONTENT_PATH="${{ inputs.content-path }}"
        export USER_REPO_PATH="$GITHUB_WORKSPACE"
        
        # Debug: Show environment
        echo "🔍 Debug Info:"
        echo "- USER_REPO_PATH: $USER_REPO_PATH"
        echo "- USER_CONTENT_PATH: $USER_CONTENT_PATH"
        echo "- Current directory: $(pwd)"
        echo "- User repo contents:"
        ls -la "$USER_REPO_PATH" || echo "User repo path not found"
        echo "- Content directory:"
        ls -la "$USER_REPO_PATH/$USER_CONTENT_PATH" 2>/dev/null || echo "Content directory not found"
        
        # Run script from action repository
        echo "🔄 Processing Dev.to article..."
        cd action-repo
        
        # Check if script exists
        if [ ! -f "devto-publish/scripts/devto_post.js" ]; then
          echo "❌ Error: devto_post.js script not found!"
          echo "Available files in action-repo:"
          find . -name "*.js" -type f 2>/dev/null || echo "No JS files found"
          exit 1
        fi
        
        # Run script with error capture
        echo "📝 Running Node.js script..."
        if node devto-publish/scripts/devto_post.js > ../devto_output.json 2>../devto_script_error.log; then
          echo "✅ Script executed successfully"
        else
          SCRIPT_EXIT_CODE=$?
          echo "❌ Script execution failed with exit code: $SCRIPT_EXIT_CODE"
          echo "Error output:"
          cat ../devto_script_error.log 2>/dev/null || echo "No error log available"
          echo "Script stdout:"
          cat ../devto_output.json 2>/dev/null || echo "No output file generated"
          exit $SCRIPT_EXIT_CODE
        fi
        
        cd ..
        
        # Validate and process JSON
        if jq empty devto_output.json 2>/dev/null; then
          echo "✅ Dev.to article processed successfully"
          
          # Extract data silently
          POST_ID=$(jq -r '.id' devto_output.json)
          POST_TITLE=$(jq -r '.title' devto_output.json)
          POST_URL=$(jq -r '.url' devto_output.json)
          POST_PUBLISHED_AT=$(jq -r '.published_at' devto_output.json)
          POST_UPDATED_AT=$(jq -r '.updated_at' devto_output.json)
          
          # Save to repository variables silently
          echo "💾 Updating Dev.to repository variables..."
          
          VARS=(
            "DEV_TO_SAVED_POST_ID:$POST_ID"
            "DEV_TO_SAVED_POST_TITLE:$POST_TITLE"
            "DEV_TO_SAVED_POST_URL:$POST_URL"
            "DEV_TO_SAVED_POST_PUBLISHED_AT:$POST_PUBLISHED_AT"
            "DEV_TO_SAVED_POST_UPDATED_AT:$POST_UPDATED_AT"
          )
          
          for var_pair in "${VARS[@]}"; do
            VAR_NAME="${var_pair%%:*}"
            VAR_VALUE="${var_pair#*:}"
            
            # Update or create variable silently
            gh api --method PATCH "/repos/${{ github.repository }}/actions/variables/$VAR_NAME" \
              -f name="$VAR_NAME" -f value="$VAR_VALUE" >/dev/null 2>&1 || \
            gh api --method POST "/repos/${{ github.repository }}/actions/variables" \
              -f name="$VAR_NAME" -f value="$VAR_VALUE" >/dev/null 2>&1
          done
          
          echo "✅ Dev.to repository variables updated"
          echo "📢 Article processing completed on Dev.to"
          echo "🔗 Check your Dev.to dashboard for the published/updated article"
          
          # Clean up
          rm -f devto_output.json devto_script_error.log
          
        else
          echo "❌ Error: Invalid JSON output from Dev.to script"
          echo "Script output (for debugging):"
          cat devto_output.json 2>/dev/null || echo "No output file"
          echo "Error log:"
          cat devto_script_error.log 2>/dev/null || echo "No error log"
          exit 1
        fi
      shell: bash
      env:
        DEV_TO_API_KEY: ${{ inputs.devto-api-key }}
        GITHUB_USERNAME: ${{ github.repository_owner }}
        GITHUB_REPO: ${{ github.event.repository.name }}
        GITHUB_BRANCH: ${{ github.ref_name }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
