name: Auto publish on dev.to

on:
  push:
    branches: [main]  # Trigger on pushes to 'main' branch

jobs:
  post-on-devto:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code for access to README.md and script
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Load any previously saved repo variables into environment
      - name: Load saved post variables as env
        run: |
          echo "DEV_TO_SAVED_POST_ID=${{ vars.DEV_TO_SAVED_POST_ID }}" >> $GITHUB_ENV
          echo "DEV_TO_SAVED_POST_TITLE=${{ vars.DEV_TO_SAVED_POST_TITLE }}" >> $GITHUB_ENV
          echo "DEV_TO_SAVED_POST_URL=${{ vars.DEV_TO_SAVED_POST_URL }}" >> $GITHUB_ENV
          echo "DEV_TO_SAVED_POST_PUBLISHED_AT=${{ vars.DEV_TO_SAVED_POST_PUBLISHED_AT }}" >> $GITHUB_ENV
          echo "DEV_TO_SAVED_POST_UPDATED_AT=${{ vars.DEV_TO_SAVED_POST_UPDATED_AT }}" >> $GITHUB_ENV

      # 3Ô∏è‚É£ Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '24'

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm install

      # 5Ô∏è‚É£ (Optional debug) List repo structure
      # - name: Debug repo files
      #   run: |
      #     pwd
      #     ls -la
      #     ls -la api/

      # 6Ô∏è‚É£ Run your post/update script, output JSON
      - name: Run post script and capture output
        id: run_post
        run: |
          node api/devto_post.js > post_output.json

          echo "Script output:"
          cat post_output.json

          if jq empty post_output.json 2>/dev/null; then
            echo "JSON is valid, extracting fields..."
            echo "DEV_TO_SAVED_POST_ID=$(jq -r '.id' post_output.json)" >> $GITHUB_ENV
            echo "DEV_TO_SAVED_POST_TITLE=$(jq -r '.title' post_output.json)" >> $GITHUB_ENV
            echo "DEV_TO_SAVED_POST_URL=$(jq -r '.url' post_output.json)" >> $GITHUB_ENV
            echo "DEV_TO_SAVED_POST_PUBLISHED_AT=$(jq -r '.published_at' post_output.json)" >> $GITHUB_ENV
            echo "DEV_TO_SAVED_POST_UPDATED_AT=$(jq -r '.updated_at' post_output.json)" >> $GITHUB_ENV
          else
            echo "‚ùå Error: Output is not valid JSON" 
            cat post_output.json
            exit 1
          fi
        env:
          DEV_TO_API_KEY: ${{ secrets.DEV_TO_API_KEY }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          GITHUB_BRANCH: ${{ github.ref_name }}

      # 7Ô∏è‚É£ Save details back into GitHub Repo Variables (Persistent between runs)
      - name: Save post details to repo variables
        run: |
          if jq -e 'has("error") | not' post_output.json; then
            echo "‚úÖ Updating GitHub repository variables..."

            for var in DEV_TO_SAVED_POST_ID DEV_TO_SAVED_POST_TITLE DEV_TO_SAVED_POST_URL DEV_TO_SAVED_POST_PUBLISHED_AT DEV_TO_SAVED_POST_UPDATED_AT
            do
              VALUE=$(jq -r '.id' post_output.json)
              if [ "$var" = "DEV_TO_SAVED_POST_TITLE" ]; then VALUE=$(jq -r '.title' post_output.json); fi
              if [ "$var" = "DEV_TO_SAVED_POST_URL" ]; then VALUE=$(jq -r '.url' post_output.json); fi
              if [ "$var" = "DEV_TO_SAVED_POST_PUBLISHED_AT" ]; then VALUE=$(jq -r '.published_at' post_output.json); fi
              if [ "$var" = "DEV_TO_SAVED_POST_UPDATED_AT" ]; then VALUE=$(jq -r '.updated_at' post_output.json); fi

              gh api --method PATCH /repos/${{ github.repository }}/actions/variables/$var \
                -f name="$var" \
                -f value="$VALUE" || \
              gh api --method POST /repos/${{ github.repository }}/actions/variables \
                -f name="$var" \
                -f value="$VALUE"
            done
          else
            echo "‚è≠ Skipped saving repo variables due to errors."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.VAR_EDIT_TOKEN_GIT }}   # üîë User-provided PAT with repo + actions:write

      # 8Ô∏è‚É£ Final output
      - name: Show post info
        run: |
          echo "üì¢ Article posted/updated."
          # echo "ID: $DEV_TO_SAVED_POST_ID"
          echo "Title: $DEV_TO_SAVED_POST_TITLE"
          echo "URL: $DEV_TO_SAVED_POST_URL"
          # echo "Published At: $DEV_TO_SAVED_POST_PUBLISHED_AT"
          # echo "Updated At: $DEV_TO_SAVED_POST_UPDATED_AT"
