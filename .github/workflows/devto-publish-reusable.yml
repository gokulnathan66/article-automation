name: Reusable Dev.to Publisher

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        default: '24'
        type: string
      branch:
        description: 'Branch to trigger on'
        required: false
        default: 'main'
        type: string
    secrets:
      DEV_TO_API_KEY:
        description: 'Dev.to API Key'
        required: true
      VAR_EDIT_TOKEN_GIT:
        description: 'GitHub Token with repository variables write permission'
        required: true

jobs:
  post-on-devto:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          
      - name: Install dependencies
        run: npm install
        
      - name: Process Dev.to article
        run: |
          # Load saved variables silently
          if [ -n "${{ vars.DEV_TO_SAVED_POST_ID }}" ]; then
            export DEV_TO_SAVED_POST_ID="${{ vars.DEV_TO_SAVED_POST_ID }}"
            export DEV_TO_SAVED_POST_TITLE="${{ vars.DEV_TO_SAVED_POST_TITLE }}"
            export DEV_TO_SAVED_POST_URL="${{ vars.DEV_TO_SAVED_POST_URL }}"
            export DEV_TO_SAVED_POST_PUBLISHED_AT="${{ vars.DEV_TO_SAVED_POST_PUBLISHED_AT }}"
            export DEV_TO_SAVED_POST_UPDATED_AT="${{ vars.DEV_TO_SAVED_POST_UPDATED_AT }}"
            echo "‚úÖ Previous post data loaded"
          else
            echo "‚ÑπÔ∏è No previous post data found"
          fi
          
          # Run script silently
          echo "üîÑ Processing article..."
          node api/devto_post.js > post_output.json 2>/dev/null
          
          # Validate and process JSON
          if jq empty post_output.json 2>/dev/null; then
            echo "‚úÖ Article processed successfully"
            
            # Extract data silently
            POST_ID=$(jq -r '.id' post_output.json)
            POST_TITLE=$(jq -r '.title' post_output.json)
            POST_URL=$(jq -r '.url' post_output.json)
            POST_PUBLISHED_AT=$(jq -r '.published_at' post_output.json)
            POST_UPDATED_AT=$(jq -r '.updated_at' post_output.json)
            
            # Save to repository variables silently
            echo "üíæ Updating repository variables..."
            
            VARS=(
              "DEV_TO_SAVED_POST_ID:$POST_ID"
              "DEV_TO_SAVED_POST_TITLE:$POST_TITLE"
              "DEV_TO_SAVED_POST_URL:$POST_URL"
              "DEV_TO_SAVED_POST_PUBLISHED_AT:$POST_PUBLISHED_AT"
              "DEV_TO_SAVED_POST_UPDATED_AT:$POST_UPDATED_AT"
            )
            
            for var_pair in "${VARS[@]}"; do
              VAR_NAME="${var_pair%%:*}"
              VAR_VALUE="${var_pair#*:}"
              
              # Update or create variable silently
              gh api --method PATCH "/repos/${{ github.repository }}/actions/variables/$VAR_NAME" \
                -f name="$VAR_NAME" -f value="$VAR_VALUE" >/dev/null 2>&1 || \
              gh api --method POST "/repos/${{ github.repository }}/actions/variables" \
                -f name="$VAR_NAME" -f value="$VAR_VALUE" >/dev/null 2>&1
            done
            
            echo "‚úÖ Repository variables updated"
            echo "üì¢ Article processing completed on Dev.to"
            echo "üîó Check your Dev.to dashboard for the published/updated article"
            
          else
            echo "‚ùå Error: Invalid JSON output from script"
            echo "Script output (for debugging):"
            cat post_output.json
            exit 1
          fi
        env:
          DEV_TO_API_KEY: ${{ secrets.DEV_TO_API_KEY }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          GITHUB_BRANCH: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.VAR_EDIT_TOKEN_GIT }}
