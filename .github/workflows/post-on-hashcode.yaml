name: Auto publish on hashnode

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  post-on-hashnode:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm install

      # 4Ô∏è‚É£ Run script with complete privacy
      - name: Process Hashnode article
        run: |
          # Load saved variables silently
          if [ -n "${{ vars.HASHNODE_SAVED_POST_ID }}" ]; then
            export HASHNODE_SAVED_POST_ID="${{ vars.HASHNODE_SAVED_POST_ID }}"
            export HASHNODE_SAVED_POST_SLUG="${{ vars.HASHNODE_SAVED_POST_SLUG }}"
            export HASHNODE_SAVED_POST_TITLE="${{ vars.HASHNODE_SAVED_POST_TITLE }}"
            export HASHNODE_SAVED_POST_URL="${{ vars.HASHNODE_SAVED_POST_URL }}"
            export HASHNODE_SAVED_POST_PUBLISHED_AT="${{ vars.HASHNODE_SAVED_POST_PUBLISHED_AT }}"
            export HASHNODE_SAVED_POST_UPDATED_AT="${{ vars.HASHNODE_SAVED_POST_UPDATED_AT }}"
            echo "‚úÖ Previous post data loaded"
          else
            echo "‚ÑπÔ∏è No previous post data found"
          fi
          
          # Run script silently
          echo "üîÑ Processing article..."
          node api/hashnode.js > post_output.json 2>/dev/null
          
          # Validate and process JSON
          if jq empty post_output.json 2>/dev/null; then
            echo "‚úÖ Article processed successfully"
            
            # Extract data silently
            POST_ID=$(jq -r '.id' post_output.json)
            POST_SLUG=$(jq -r '.slug' post_output.json)
            POST_TITLE=$(jq -r '.title' post_output.json)
            POST_URL=$(jq -r '.url' post_output.json)
            POST_PUBLISHED_AT=$(jq -r '.published_at' post_output.json)
            POST_UPDATED_AT=$(jq -r '.updated_at' post_output.json)
            
            # Save to repository variables silently
            echo "üíæ Updating repository variables..."
            
            VARS=(
              "HASHNODE_SAVED_POST_ID:$POST_ID"
              "HASHNODE_SAVED_POST_SLUG:$POST_SLUG"
              "HASHNODE_SAVED_POST_TITLE:$POST_TITLE"
              "HASHNODE_SAVED_POST_URL:$POST_URL"
              "HASHNODE_SAVED_POST_PUBLISHED_AT:$POST_PUBLISHED_AT"
              "HASHNODE_SAVED_POST_UPDATED_AT:$POST_UPDATED_AT"
            )
            
            for var_pair in "${VARS[@]}"; do
              VAR_NAME="${var_pair%%:*}"
              VAR_VALUE="${var_pair#*:}"
              
              # Update or create variable silently
              gh api --method PATCH "/repos/${{ github.repository }}/actions/variables/$VAR_NAME" \
                -f name="$VAR_NAME" -f value="$VAR_VALUE" >/dev/null 2>&1 || \
              gh api --method POST "/repos/${{ github.repository }}/actions/variables" \
                -f name="$VAR_NAME" -f value="$VAR_VALUE" >/dev/null 2>&1
            done
            
            echo "‚úÖ Repository variables updated"
            echo "üì¢ Article processing completed on Hashnode"
            echo "üîó Check your Hashnode dashboard for the published/updated article"
            
          else
            echo "‚ùå Error: Invalid JSON output from script"
            echo "Script output (for debugging):"
            cat post_output.json
            exit 1
          fi
        env:
          HASHNODE_PAT: ${{ secrets.HASHNODE_PAT }}
          HASHNODE_PUBLICATION_ID: ${{ secrets.HASHNODE_PUBLICATION_ID }}
          HASHNODE_PUBLICATION_HOST: ${{ secrets.HASHNODE_PUBLICATION_HOST }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.event.repository.name }}
          GITHUB_BRANCH: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.VAR_EDIT_TOKEN_GIT }}
